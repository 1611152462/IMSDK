package com.ecareyun.im.model.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ecareyun.im.model.db.entity.MessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ENTITY".
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, long.class, "msgId", false, "MSG_ID");
        public final static Property MessageType = new Property(2, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property ChatType = new Property(3, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property SendId = new Property(4, String.class, "sendId", false, "SEND_ID");
        public final static Property SendName = new Property(5, String.class, "sendName", false, "SEND_NAME");
        public final static Property SendPic = new Property(6, String.class, "sendPic", false, "SEND_PIC");
        public final static Property RelationType = new Property(7, int.class, "relationType", false, "RELATION_TYPE");
        public final static Property ReceiveId = new Property(8, String.class, "receiveId", false, "RECEIVE_ID");
        public final static Property ReceiveName = new Property(9, String.class, "receiveName", false, "RECEIVE_NAME");
        public final static Property ReceivePic = new Property(10, String.class, "receivePic", false, "RECEIVE_PIC");
        public final static Property BoubleType = new Property(11, int.class, "boubleType", false, "BOUBLE_TYPE");
        public final static Property SendDate = new Property(12, long.class, "sendDate", false, "SEND_DATE");
        public final static Property ExpandMsg = new Property(13, String.class, "expandMsg", false, "EXPAND_MSG");
        public final static Property Content = new Property(14, String.class, "content", false, "CONTENT");
        public final static Property SendStatus = new Property(15, int.class, "sendStatus", false, "SEND_STATUS");
        public final static Property IsRead = new Property(16, byte.class, "isRead", false, "IS_READ");
        public final static Property UniqueId = new Property(17, String.class, "uniqueId", false, "UNIQUE_ID");
    }


    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSG_ID\" INTEGER NOT NULL UNIQUE ," + // 1: msgId
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 2: messageType
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 3: chatType
                "\"SEND_ID\" TEXT," + // 4: sendId
                "\"SEND_NAME\" TEXT," + // 5: sendName
                "\"SEND_PIC\" TEXT," + // 6: sendPic
                "\"RELATION_TYPE\" INTEGER NOT NULL ," + // 7: relationType
                "\"RECEIVE_ID\" TEXT," + // 8: receiveId
                "\"RECEIVE_NAME\" TEXT," + // 9: receiveName
                "\"RECEIVE_PIC\" TEXT," + // 10: receivePic
                "\"BOUBLE_TYPE\" INTEGER NOT NULL ," + // 11: boubleType
                "\"SEND_DATE\" INTEGER NOT NULL ," + // 12: sendDate
                "\"EXPAND_MSG\" TEXT," + // 13: expandMsg
                "\"CONTENT\" TEXT," + // 14: content
                "\"SEND_STATUS\" INTEGER NOT NULL ," + // 15: sendStatus
                "\"IS_READ\" INTEGER NOT NULL ," + // 16: isRead
                "\"UNIQUE_ID\" TEXT);"); // 17: uniqueId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_ENTITY_UNIQUE_ID ON \"MESSAGE_ENTITY\"" +
                " (\"UNIQUE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgId());
        stmt.bindLong(3, entity.getMessageType());
        stmt.bindLong(4, entity.getChatType());
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(5, sendId);
        }
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(6, sendName);
        }
 
        String sendPic = entity.getSendPic();
        if (sendPic != null) {
            stmt.bindString(7, sendPic);
        }
        stmt.bindLong(8, entity.getRelationType());
 
        String receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindString(9, receiveId);
        }
 
        String receiveName = entity.getReceiveName();
        if (receiveName != null) {
            stmt.bindString(10, receiveName);
        }
 
        String receivePic = entity.getReceivePic();
        if (receivePic != null) {
            stmt.bindString(11, receivePic);
        }
        stmt.bindLong(12, entity.getBoubleType());
        stmt.bindLong(13, entity.getSendDate());
 
        String expandMsg = entity.getExpandMsg();
        if (expandMsg != null) {
            stmt.bindString(14, expandMsg);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(15, content);
        }
        stmt.bindLong(16, entity.getSendStatus());
        stmt.bindLong(17, entity.getIsRead());
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(18, uniqueId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgId());
        stmt.bindLong(3, entity.getMessageType());
        stmt.bindLong(4, entity.getChatType());
 
        String sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindString(5, sendId);
        }
 
        String sendName = entity.getSendName();
        if (sendName != null) {
            stmt.bindString(6, sendName);
        }
 
        String sendPic = entity.getSendPic();
        if (sendPic != null) {
            stmt.bindString(7, sendPic);
        }
        stmt.bindLong(8, entity.getRelationType());
 
        String receiveId = entity.getReceiveId();
        if (receiveId != null) {
            stmt.bindString(9, receiveId);
        }
 
        String receiveName = entity.getReceiveName();
        if (receiveName != null) {
            stmt.bindString(10, receiveName);
        }
 
        String receivePic = entity.getReceivePic();
        if (receivePic != null) {
            stmt.bindString(11, receivePic);
        }
        stmt.bindLong(12, entity.getBoubleType());
        stmt.bindLong(13, entity.getSendDate());
 
        String expandMsg = entity.getExpandMsg();
        if (expandMsg != null) {
            stmt.bindString(14, expandMsg);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(15, content);
        }
        stmt.bindLong(16, entity.getSendStatus());
        stmt.bindLong(17, entity.getIsRead());
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(18, uniqueId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // msgId
            cursor.getInt(offset + 2), // messageType
            cursor.getInt(offset + 3), // chatType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sendName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sendPic
            cursor.getInt(offset + 7), // relationType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // receiveId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // receiveName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // receivePic
            cursor.getInt(offset + 11), // boubleType
            cursor.getLong(offset + 12), // sendDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // expandMsg
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // content
            cursor.getInt(offset + 15), // sendStatus
            (byte) cursor.getShort(offset + 16), // isRead
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // uniqueId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.getLong(offset + 1));
        entity.setMessageType(cursor.getInt(offset + 2));
        entity.setChatType(cursor.getInt(offset + 3));
        entity.setSendId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSendPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRelationType(cursor.getInt(offset + 7));
        entity.setReceiveId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceiveName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReceivePic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBoubleType(cursor.getInt(offset + 11));
        entity.setSendDate(cursor.getLong(offset + 12));
        entity.setExpandMsg(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setContent(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSendStatus(cursor.getInt(offset + 15));
        entity.setIsRead((byte) cursor.getShort(offset + 16));
        entity.setUniqueId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
