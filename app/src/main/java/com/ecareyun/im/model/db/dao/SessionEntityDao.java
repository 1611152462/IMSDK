package com.ecareyun.im.model.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ecareyun.im.model.db.entity.SessionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION_ENTITY".
*/
public class SessionEntityDao extends AbstractDao<SessionEntity, Long> {

    public static final String TABLENAME = "SESSION_ENTITY";

    /**
     * Properties of entity SessionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SId = new Property(0, Long.class, "sId", true, "_id");
        public final static Property RelationType = new Property(1, int.class, "relationType", false, "RELATION_TYPE");
        public final static Property ChatType = new Property(2, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property MessageId = new Property(3, long.class, "messageId", false, "MESSAGE_ID");
        public final static Property ReceiveId = new Property(4, int.class, "receiveId", false, "RECEIVE_ID");
        public final static Property ReceiveName = new Property(5, String.class, "receiveName", false, "RECEIVE_NAME");
        public final static Property ReceivePic = new Property(6, String.class, "receivePic", false, "RECEIVE_PIC");
        public final static Property MessageType = new Property(7, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property SendData = new Property(8, long.class, "sendData", false, "SEND_DATA");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property SendStatus = new Property(10, int.class, "sendStatus", false, "SEND_STATUS");
        public final static Property UnReadNum = new Property(11, int.class, "unReadNum", false, "UN_READ_NUM");
        public final static Property ExtType = new Property(12, int.class, "extType", false, "EXT_TYPE");
        public final static Property ShowTop = new Property(13, byte.class, "showTop", false, "SHOW_TOP");
        public final static Property UniqueId = new Property(14, String.class, "uniqueId", false, "UNIQUE_ID");
    }


    public SessionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SessionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: sId
                "\"RELATION_TYPE\" INTEGER NOT NULL ," + // 1: relationType
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 2: chatType
                "\"MESSAGE_ID\" INTEGER NOT NULL ," + // 3: messageId
                "\"RECEIVE_ID\" INTEGER NOT NULL UNIQUE ," + // 4: receiveId
                "\"RECEIVE_NAME\" TEXT," + // 5: receiveName
                "\"RECEIVE_PIC\" TEXT," + // 6: receivePic
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 7: messageType
                "\"SEND_DATA\" INTEGER NOT NULL ," + // 8: sendData
                "\"CONTENT\" TEXT," + // 9: content
                "\"SEND_STATUS\" INTEGER NOT NULL ," + // 10: sendStatus
                "\"UN_READ_NUM\" INTEGER NOT NULL ," + // 11: unReadNum
                "\"EXT_TYPE\" INTEGER NOT NULL ," + // 12: extType
                "\"SHOW_TOP\" INTEGER NOT NULL ," + // 13: showTop
                "\"UNIQUE_ID\" TEXT);"); // 14: uniqueId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SessionEntity entity) {
        stmt.clearBindings();
 
        Long sId = entity.getSId();
        if (sId != null) {
            stmt.bindLong(1, sId);
        }
        stmt.bindLong(2, entity.getRelationType());
        stmt.bindLong(3, entity.getChatType());
        stmt.bindLong(4, entity.getMessageId());
        stmt.bindLong(5, entity.getReceiveId());
 
        String receiveName = entity.getReceiveName();
        if (receiveName != null) {
            stmt.bindString(6, receiveName);
        }
 
        String receivePic = entity.getReceivePic();
        if (receivePic != null) {
            stmt.bindString(7, receivePic);
        }
        stmt.bindLong(8, entity.getMessageType());
        stmt.bindLong(9, entity.getSendData());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
        stmt.bindLong(11, entity.getSendStatus());
        stmt.bindLong(12, entity.getUnReadNum());
        stmt.bindLong(13, entity.getExtType());
        stmt.bindLong(14, entity.getShowTop());
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(15, uniqueId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SessionEntity entity) {
        stmt.clearBindings();
 
        Long sId = entity.getSId();
        if (sId != null) {
            stmt.bindLong(1, sId);
        }
        stmt.bindLong(2, entity.getRelationType());
        stmt.bindLong(3, entity.getChatType());
        stmt.bindLong(4, entity.getMessageId());
        stmt.bindLong(5, entity.getReceiveId());
 
        String receiveName = entity.getReceiveName();
        if (receiveName != null) {
            stmt.bindString(6, receiveName);
        }
 
        String receivePic = entity.getReceivePic();
        if (receivePic != null) {
            stmt.bindString(7, receivePic);
        }
        stmt.bindLong(8, entity.getMessageType());
        stmt.bindLong(9, entity.getSendData());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
        stmt.bindLong(11, entity.getSendStatus());
        stmt.bindLong(12, entity.getUnReadNum());
        stmt.bindLong(13, entity.getExtType());
        stmt.bindLong(14, entity.getShowTop());
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(15, uniqueId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SessionEntity readEntity(Cursor cursor, int offset) {
        SessionEntity entity = new SessionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sId
            cursor.getInt(offset + 1), // relationType
            cursor.getInt(offset + 2), // chatType
            cursor.getLong(offset + 3), // messageId
            cursor.getInt(offset + 4), // receiveId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiveName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // receivePic
            cursor.getInt(offset + 7), // messageType
            cursor.getLong(offset + 8), // sendData
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
            cursor.getInt(offset + 10), // sendStatus
            cursor.getInt(offset + 11), // unReadNum
            cursor.getInt(offset + 12), // extType
            (byte) cursor.getShort(offset + 13), // showTop
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // uniqueId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SessionEntity entity, int offset) {
        entity.setSId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRelationType(cursor.getInt(offset + 1));
        entity.setChatType(cursor.getInt(offset + 2));
        entity.setMessageId(cursor.getLong(offset + 3));
        entity.setReceiveId(cursor.getInt(offset + 4));
        entity.setReceiveName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceivePic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessageType(cursor.getInt(offset + 7));
        entity.setSendData(cursor.getLong(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSendStatus(cursor.getInt(offset + 10));
        entity.setUnReadNum(cursor.getInt(offset + 11));
        entity.setExtType(cursor.getInt(offset + 12));
        entity.setShowTop((byte) cursor.getShort(offset + 13));
        entity.setUniqueId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SessionEntity entity, long rowId) {
        entity.setSId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SessionEntity entity) {
        if(entity != null) {
            return entity.getSId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SessionEntity entity) {
        return entity.getSId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
